#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
	vector<vector<int> > combinationSum(vector<int>& candidates, int target) {
	
	sort(candidates.begin(), candidates.end());

	vector<vector<int> > result;
	vector<int> path;

	int len = candidates.size();
	if (len < 1)
		return result;

	
	do_combinationSum(candidates, result, 0, target, path);

	return result;
	
	}
private:
	static void do_combinationSum(vector<int>& input, vector<vector<int> >& output, int start, int  sub, vector<int>& tmp)
	{
		if (sub == 0)
		{
			output.push_back(tmp);
			return;
		}

		for (int i = start; i < input.size(); ++i)
		{
			if (sub - input[i] < 0)
				return;
			tmp.push_back(input[i]);
			do_combinationSum(input, output, i, sub - input[i], tmp);
			tmp.pop_back();
		}
		
	}
	/*static void do_combinationSum(vector<int> & candidates, vector<vector<int> >& result, int k, int len, int subtarget, vector<int>& path)
	{
		if (k >= len)
			return ;
		else
		{
			int count = subtarget / candidates[k];
			if (count < 1)
				return;
				for (int i = 1; i <= count; ++i)
				{
					if (subtarget == i * candidates[k])
					{
						for (int m = 0; m < i; ++m)
							path.push_back(candidates[k]);
						result.push_back(path);
					}
					else if (subtarget - i * candidates[k] > candidates[k])
					{
						for (int m = 0; m < i; ++m)
							path.push_back(candidates[k]);
						do_combinationSum(candidates, result, k + 1, len, subtarget - i * candidates[k], path);
					}
					else 
						return ;
			}
			do_combinationSum(candidates, result, k + 1, len, subtarget, path);
		}
	}
	*/
	 

};

int main()
{
	int a[] = {2, 3, 6, 7};
	vector<int> vec(a, a+4);
	int target = 7;

	Solution S;
	vector<vector<int> > result = S.combinationSum(vec,target);
	
	int m = result.size();
	for (int i = 0; i < m; ++i)
	{
		int n = result[i].size();
		for (int k = 0; k < n; ++k)
			cout<<result[i][k]<<" ";
		cout<<endl;
	}
	
	return 0;
}
